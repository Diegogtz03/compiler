/* ----------------- Lexico - Palabras reservadas ----------------- */

program : 'p' 'r' 'o' 'g' 'r' 'a' 'm';
main : 'm' 'a' 'i' 'n';
var: 'v' 'a' 'r';
end: 'e' 'n' 'd';
int_rw: 'i' 'n' 't';
float_rw: 'f' 'l' 'o' 'a' 't';
void: 'v' 'o' 'i' 'd';
while: 'w' 'h' 'i' 'l' 'e';
do: 'd' 'o';
print: 'p' 'r' 'i' 'n' 't';
if: 'i' 'f';
else: 'e' 'l' 's' 'e';

/* ----------------- Lexico - Simbolos ----------------- */

semicolon: ';';
two_dots: ':';
comma: ',';
curly_open: '{';
curly_close: '}';
parenthesis_open: '(';
parenthesis_close: ')';
bracket_open: '[';
bracket_close: ']';
equal: '=';
plus: '+';
minus: '-';
greater_than: '>';
less_than: '<';
not_equal: '!' '=';
mult: '*';
div: '/';

/* ----------------- Lexico - Constantes ----------------- */

id : 'a'-'z' {'a'-'z'} { ('_' | 'A'-'Z') ('a'-'z' | 'A'-'Z' | '0'-'9') {'a'-'z' | 'A'-'Z' | '0'-'9'} } ;
myint : '0'-'9' {'0'-'9'} ;
myfloat : '0'-'9' {'0'-'9'} '.' '0'-'9' {'0'-'9'} ;
string : '"' {'a'-'z' | 'A'-'Z'} '"' ;

!whitespace : ' ' | '\t' | '\n' | '\r' ;


/* ----------------- Sintaxis ----------------- */

<< import (
  "compiler/ast"
  "compiler/types"
)>> 

Start : Programa ;

Program_Create : id << ast.CreateFuntion($0, true) >>;

Programa : program Program_Create semicolon Vars Programa_PR main Body end
  | program Program_Create semicolon Programa_PR main Body end;

Programa_PR : Funcs Programa_PR
  | empty; 

Enqueue_Vars : id << ast.AddVarToQueue($0) >> ;

Declare_Vars : Type << ast.AddVarsToTable($0.(types.Type)) >> ;

Vars : var Enqueue_Vars Vars_PR two_dots Declare_Vars semicolon Vars_PR_PR ;

Vars_PR : comma Enqueue_Vars Vars_PR
  | empty ;

Vars_PR_PR : Enqueue_Vars Vars_PR two_dots Declare_Vars semicolon Vars_PR_PR
  | empty ;

Type : int_rw << ast.SetCurrentType(types.Int) >> | float_rw << ast.SetCurrentType(types.Float) >> ;

Body : curly_open Body_PR curly_close;

Body_PR : Statement Body_PR
  | empty ;

Statement : Assign
  | Condition
  | Cycle
  | F_call
  | Print;

Print : print parenthesis_open Expr Print_PR parenthesis_close semicolon
  | print parenthesis_open string Print_PR parenthesis_close semicolon;

Print_PR : comma Expr Print_PR
  | comma string Print_PR
  | empty ;

Assign : id equal Exp semicolon;

Cycle : while parenthesis_open Expr parenthesis_close do Body semicolon;

Condition : if parenthesis_open Expr parenthesis_close Body semicolon
  | if parenthesis_open Expr parenthesis_close Body else Body semicolon;


F_call : id parenthesis_open parenthesis_close semicolon
  | id parenthesis_open Expr F_call_PR parenthesis_close semicolon;

F_call_PR : comma Expr F_call_PR 
  | empty ;

Cte : myint
  | myfloat;

Expr : Exp
  | Exp greater_than Exp
  | Exp less_than Exp
  | Exp not_equal Exp;

Exp : Term
  | Term plus Exp
  | Term minus Exp;

Term : Fact
  | Fact mult Term
  | Fact div Term;

Fact : parenthesis_open Expr parenthesis_close
  | Cte
  | id
  | plus id
  | minus id
  | plus Cte
  | minus Cte;

Func_Create : id << ast.CreateFuntion($0, false) >>;

Func_Close : semicolon << ast.ResetToGlobalScope() >>;

Funcs : void Func_Create parenthesis_open parenthesis_close bracket_open Body bracket_close Func_Close
  | void Func_Create parenthesis_open parenthesis_close bracket_open Vars Body bracket_close Func_Close
  | void Func_Create parenthesis_open Enqueue_Vars two_dots Declare_Vars Funcs_PR parenthesis_close bracket_open Body bracket_close Func_Close
  | void Func_Create parenthesis_open Enqueue_Vars two_dots Declare_Vars Funcs_PR parenthesis_close bracket_open Vars Body bracket_close Func_Close;

Funcs_PR : comma Enqueue_Vars two_dots Declare_Vars Funcs_PR
  | empty ;