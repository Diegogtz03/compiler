/* ----------------- Lexico - Palabras reservadas ----------------- */

program : 'p' 'r' 'o' 'g' 'r' 'a' 'm';
main : 'm' 'a' 'i' 'n';
var: 'v' 'a' 'r';
end: 'e' 'n' 'd';
int_rw: 'i' 'n' 't';
float_rw: 'f' 'l' 'o' 'a' 't';
void: 'v' 'o' 'i' 'd';
while: 'w' 'h' 'i' 'l' 'e';
do: 'd' 'o';
print: 'p' 'r' 'i' 'n' 't';
if: 'i' 'f';
else: 'e' 'l' 's' 'e';

/* ----------------- Lexico - Simbolos ----------------- */

semicolon: ';';
two_dots: ':';
comma: ',';
curly_open: '{';
curly_close: '}';
parenthesis_open: '(';
parenthesis_close: ')';
bracket_open: '[';
bracket_close: ']';
equal: '=';
plus: '+';
minus: '-';
greater_than: '>';
less_than: '<';
not_equal: '!' '=';
mult: '*';
div: '/';

/* ----------------- Lexico - Constantes ----------------- */

id : 'a'-'z' {'a'-'z'} { ('_' | 'A'-'Z') ('a'-'z' | 'A'-'Z' | '0'-'9') {'a'-'z' | 'A'-'Z' | '0'-'9'} } ;
myint : '0'-'9' {'0'-'9'} ;
myfloat : '0'-'9' {'0'-'9'} '.' '0'-'9' {'0'-'9'} ;
string : '"' {'a'-'z' | 'A'-'Z' | '0'-'9' | ' ' | '.' | ',' | '!' | '?' | '-' | '_' | ':' } '"' ;

!whitespace : ' ' | '\t' | '\n' | '\r' ;


/* ----------------- Sintaxis ----------------- */

<< import (
  "compiler/ast"
  "compiler/types"
  "compiler/memory"
  "compiler/token"
)>> 

Start : Programa ;

Program_Create : id << ast.CreateFuntion($0, true) >>;

Main_Call : program << ast.MainGoTo() >>;
Main_Call_Fill : main << ast.FillMainGoTo() >>;
Terminate_Program : end << ast.GenerateTerminate() >>;

Programa : Main_Call Program_Create semicolon Vars Programa_PR Main_Call_Fill Body Terminate_Program
  | Main_Call Program_Create semicolon Programa_PR Main_Call_Fill Body Terminate_Program;

Programa_PR : Funcs Programa_PR
  | empty; 

Enqueue_Vars : id << ast.AddVarToQueue($0) >> ;

Declare_Vars : Type << ast.AddVarsToTable($0.(types.Type)) >> ;

Vars : var Enqueue_Vars Vars_PR two_dots Declare_Vars semicolon Vars_PR_PR ;

Vars_PR : comma Enqueue_Vars Vars_PR
  | empty ;

Vars_PR_PR : Enqueue_Vars Vars_PR two_dots Declare_Vars semicolon Vars_PR_PR
  | empty ;

Type : int_rw << ast.SetCurrentType(types.Int) >> | float_rw << ast.SetCurrentType(types.Float) >> ;

Body : curly_open Body_PR curly_close;

Body_PR : Statement Body_PR
  | empty ;

Statement : Assign << ast.EndExpression() >>
  | Condition << ast.EndExpression() >>
  | Cycle << ast.EndExpression() >>
  | F_call << ast.EndExpression() >>
  | Print << ast.EndExpression() >>;

String_Constant : string << ast.PushOperand(memory.AssignStringConstant($0.(*token.Token))) >>;

Print_Op : print << ast.PushOperator(types.Print) >>;

Print : Print_Op parenthesis_open Expr Print_PR parenthesis_close semicolon
  | Print_Op parenthesis_open String_Constant Print_PR parenthesis_close semicolon;

Print_PR_Op : comma << ast.PushOperator(types.Print) >>;

Print_PR : Print_PR_Op Expr Print_PR
  | Print_PR_Op String_Constant Print_PR
  | empty ;

Assign : Id_Index Assign_Operator Exp semicolon;

Assign_Operator : equal << ast.PushOperator(types.Assign) >>;

Cycle_End : semicolon << ast.CyclePopJumpStack() >>;

Cycle : while Cycle_Stack_Push Expr Parenthesis_Close_Exp do Body Cycle_End;

Cycle_Stack_Push: GotoF_Generation << ast.PushJumpStack() >>;

GotoF_Generation : parenthesis_open << ast.PushOperator(types.GotoF) >>;
Goto_Generation : else << ast.PopJumpStack(true) >>;
Goto_With_Jump : Goto_Generation << ast.PushOperator(types.Goto) >>;
Jump_End_With_Skip : semicolon << ast.PopJumpStack(true) >>;
Jump_End_Without_Skip : semicolon << ast.PopJumpStack(false) >>;

Parenthesis_Close_Exp : parenthesis_close << ast.EndExpression() >>;

Condition : if GotoF_Generation Expr Parenthesis_Close_Exp Body Jump_End_Without_Skip
  | if GotoF_Generation Expr Parenthesis_Close_Exp Body Goto_With_Jump Body Jump_End_With_Skip;

F_call_create : id << ast.FunctionCallCreate($0) >>;
F_call_param_fill : Expr << ast.FunctionCallFill() >>;
F_call_verify : parenthesis_close << ast.VerifyParamFill() >>;

F_call : F_call_create parenthesis_open F_call_verify semicolon
  | F_call_create parenthesis_open F_call_param_fill F_call_PR F_call_verify semicolon;

F_call_PR : comma F_call_param_fill F_call_PR 
  | empty ;

Cte : myint << ast.PushOperand(memory.AssignIntConstant($0)) >>
  | myfloat << ast.PushOperand(memory.AssignFloatConstant($0)) >>;

Expr : Exp
  | Exp GreaterThan_Operator Exp
  | Exp LessThan_Operator Exp
  | Exp NotEqual_Operator Exp;

Exp : Term
  | Term Plus_Operator Exp
  | Term Minus_Operator Exp;

Term : Fact
  | Fact Mult_Operator Term
  | Fact Div_Operator Term;

Id_Index : id << ast.GetVarIndex($0) >>;

Plus_Operator : plus << ast.PushOperator(types.Add) >>;
Minus_Operator : minus << ast.PushOperator(types.Sub) >>;
Mult_Operator : mult << ast.PushOperator(types.Mul) >>;
Div_Operator : div << ast.PushOperator(types.Div) >>;
GreaterThan_Operator : greater_than << ast.PushOperator(types.GreaterThan) >>;
LessThan_Operator : less_than << ast.PushOperator(types.LessThan) >>;
NotEqual_Operator : not_equal << ast.PushOperator(types.NotEqual) >>;

Negative_Operator : minus << memory.MakeOperandNegative() >>;

Fact_Open_Divider : parenthesis_open << ast.PushOperator(types.StackDivider) >>;
Fact_Close_Divider : parenthesis_close << ast.CloseFakeStack() >>;

Fact : Fact_Open_Divider Expr Fact_Close_Divider
  | Cte
  | Id_Index
  | plus Id_Index
  | Negative_Operator Id_Index
  | plus Cte
  | Negative_Operator Cte;

Func_Create : id << ast.CreateFuntion($0, false) >>;

Func_Close : semicolon << ast.ResetToGlobalScope() >>;
Func_End_Close : Func_Close << ast.EndFunction() >>;

Func_Parameter_Declare: two_dots << ast.InsertingParameter() >>;

Funcs : void Func_Create parenthesis_open parenthesis_close bracket_open Body bracket_close Func_End_Close
  | void Func_Create parenthesis_open parenthesis_close bracket_open Vars Body bracket_close Func_End_Close
  | void Func_Create parenthesis_open Enqueue_Vars Func_Parameter_Declare Declare_Vars Funcs_PR parenthesis_close bracket_open Body bracket_close Func_End_Close
  | void Func_Create parenthesis_open Enqueue_Vars Func_Parameter_Declare Declare_Vars Funcs_PR parenthesis_close bracket_open Vars Body bracket_close Func_End_Close;

Funcs_PR : comma Enqueue_Vars Func_Parameter_Declare Declare_Vars Funcs_PR
  | empty ;