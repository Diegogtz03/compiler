/* Lexico - Constantes */

id : 'a'-'z' {'a'-'z'} { ('_' | 'A'-'Z') ('a'-'z' | 'A'-'Z' | '0'-'9') {'a'-'z' | 'A'-'Z' | '0'-'9'} } ;
myint : '0'-'9' {'0'-'9'} ;
myfloat : '0'-'9' {'0'-'9'} '.' '0'-'9' {'0'-'9'} ;
string : '"' {'a'-'z' | 'A'-'Z'} '"' ;
!whitespace : ' ' | '\t' | '\n' | '\r' ;

/* ------------------------ */
/* Sintaxis */

Programa : "program" id ";" Vars Programa_PR "main" Body "end"
  | "program" id ";" Programa_PR "main" Body "end";

Programa_PR : Funcs Programa_PR
  | empty ;

Vars : "var" id Vars_PR ":" Type ";" Vars_PR_PR;

Vars_PR : "," id Vars_PR
  | empty ;

Vars_PR_PR : id Vars_PR ":" Type ";" Vars_PR_PR
  | empty ;

Type : "int" | "float" ;

Body : "{" Body_PR "}";
Body_PR : Statement Body_PR
  | empty ;

Statement : Assign 
  | Condition
  | Cycle
  | F_call
  | Print;

Print : "print" "(" Expr Print_PR ")" ";"
  | "print" "(" string Print_PR ")" ";";

Print_PR : "," Expr Print_PR
  | "," string Print_PR
  | empty ;

Assign : id "=" Exp ";";

Cycle : "while" "(" Expr ")" "do" Body ";";

Condition : "if" "(" Expr ")" Body ";"
  | "if" "(" Expr ")" Body "else" Body ";";

Cte : myint | myfloat;

Expr : Exp
  | Exp ">" Exp
  | Exp "<" Exp
  | Exp "!=" Exp;

Exp : Term
  | Term "+" Exp
  | Term "-" Exp;

Term : Fact
  | Fact "*" Term
  | Fact "/" Term;

Fact : "(" Expr ")"
  | "+" id
  | "-" id
  | Cte
  | id
  | "+" Cte
  | "-" Cte;

Funcs : "void" id "(" ")" "[" Body "]" ";"
  | "void" id "(" ")" "[" Vars Body "]" ";"
  | "void" id "(" id ":" Type Funcs_PR ")" "[" Body "]" ";"
  | "void" id "(" id ":" Type Funcs_PR ")" "[" Vars Body "]" ";";

Funcs_PR : "," id ":" Type Funcs_PR
  | empty ;

F_call : id "(" ")" ";"
  | id "(" Expr F_call_PR ")" ";";

F_call_PR : "," Expr F_call_PR 
  | empty ;